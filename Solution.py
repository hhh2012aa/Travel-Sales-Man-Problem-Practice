# --------------------------------------------greedy with randomness
import random
import copy
num_node = 19
dis_mat = [[99999,36,41,40,99999,99999,99999,99999,57,99999,99999,99999,99999,99999,99999,99999,99999,99999,99999],
      [36,99999,23,47,35,32,40,99999,99999,53,99999,99999,99999,99999,99999,99999,99999,99999,99999],
      [41,23,99999,28,57,27,39,46,42,99999,60,99999,99999,99999,99999,99999,99999,99999,99999],
      [40,47,28,99999,53,37,26,29,99999,799999,99999,55,99999,99999,99999,99999,99999,99999,99999],
      [99999,35,57,53,99999,99999,45,99999,99999,47,99999,99999,55,99999,99999,99999,99999,99999,55],
      [99999,32,27,37,99999,99999,48,22,36,99999,49,99999,99999,51,99999,99999,99999,99999,99999],
      [99999,499999,39,26,45,48,99999,34,99999,37,99999,68,53,99999,29,33,99999,99999,99999],
      [99999,99999,46,29,99999,22,34,99999,39,99999,37,48,42,45,99999,99999,99999,56,99999],
      [57,99999,42,99999,99999,36,99999,39,99999,99999,43,41,99999,44,99999,66,47,99999,99999],
      [99999,53,99999,799999,47,99999,37,99999,99999,99999,99999,99999,75,99999,99999,99999,28,99999,49],
      [99999,99999,60,99999,99999,49,99999,37,43,99999,99999,62,99999,35,99999,57,99999,45,51],
      [99999,99999,99999,55,99999,99999,68,48,41,99999,62,99999,24,52,45,99999,47,99999,45],
      [99999,99999,99999,99999,55,99999,53,42,99999,99999,99999,24,99999,38,30,99999,61,31,31],
      [99999,99999,99999,99999,99999,51,99999,45,44,99999,35,52,38,99999,50,48,51,99999,99999],
      [99999,99999,99999,99999,99999,99999,29,99999,99999,99999,99999,45,30,50,99999,40,33,99999,99999],
      [99999,99999,99999,99999,99999,99999,33,99999,66,99999,57,99999,99999,48,40,99999,26,25,99999],
      [99999,99999,99999,99999,99999,99999,99999,99999,47,28,99999,47,61,51,33,26,99999,99999,33],
      [99999,99999,99999,99999,99999,99999,99999,56,99999,99999,45,99999,31,99999,99999,25,99999,99999,29],
      [99999,99999,99999,99999,55,99999,99999,99999,99999,49,51,45,31,99999,99999,99999,33,29,99999]]


def update(tour1,len1):
    for j in range (len(tour1) - 1):
        phe[1][2]



lst1 = [0 for i in range(19)] 
phe =  [lst1 for i in range(19)]

def_phe = copy.deepcopy(phe)


origin_node = 0

tour = [origin_node]
tourLen = 0
unvisited = []
for i in range(1,num_node):
    unvisited.append(i)
unvisited_hold = copy.deepcopy(unvisited)
cur = origin_node
ct = 0
min_total_cost = 99999


while ct != 1000000000: 
    tourLen = 0

    while len(tour) != 19:
        next = -1
        w_list = dis_mat[cur]
        w_list = [122222/w_list[a] for a in range(len(w_list)) if a in unvisited]
        
        tt = 0 
        while True: 
            tt += tt
            next = random.choices(population = unvisited,weights=w_list, k=1)
            if dis_mat[cur][next[0]] != 99999 or tt != 100:
                break
        


        unvisited.remove(next[0])
        tour.append(next[0])
        tourLen += dis_mat[cur][next[0]]
        cur = next[0]
        
        if tt == 100 or tourLen > min_total_cost:
            unvisited = copy.deepcopy(unvisited_hold)
            tourLen = 0
            ct = ct + 1
            tour = [0]
            tt = 0
            cur = 0
            continue

    if tourLen + dis_mat[cur][0] < min_total_cost:
        tour.append(0)
        min_total_cost = tourLen + dis_mat[cur][0]
        print(tourLen + dis_mat[cur][0], tour)
    
    unvisited = copy.deepcopy(unvisited_hold)
    tourLen = 0
    cur = 0
    ct = ct + 1
    tour = [0]
    
 # --------------------------------- Gurobi solution
import sys
import math
import random
from itertools import combinations
import gurobipy as gp
from gurobipy import GRB


# Callback - use lazy constraints to eliminate sub-tours
def subtourelim(model, where):
    if where == GRB.Callback.MIPSOL:
        # make a list of edges selected in the solution
        vals = model.cbGetSolution(model._vars)
        selected = gp.tuplelist((i, j) for i, j in model._vars.keys()
                                if vals[i, j] > 0.5)
        # find the shortest cycle in the selected edge list
        tour = subtour(selected)
        if len(tour) < n:
            # add subtour elimination constr. for every pair of cities in tour
            model.cbLazy(gp.quicksum(model._vars[i, j]
                                     for i, j in combinations(tour, 2))
                         <= len(tour)-1)


# Given a tuplelist of edges, find the shortest subtour

def subtour(edges):
    unvisited = list(range(n))
    cycle = range(n+1)  # initial length has 1 more city
    while unvisited:  # true if list is non-empty
        thiscycle = []
        neighbors = unvisited
        while neighbors:
            current = neighbors[0]
            thiscycle.append(current)
            unvisited.remove(current)
            neighbors = [j for i, j in edges.select(current, '*')
                         if j in unvisited]
        if len(cycle) > len(thiscycle):
            cycle = thiscycle
    return cycle


# Parse argument



# Create n random points

random.seed(1)

# Dictionary of Euclidean distance between each pair of points

r = 19

import random
import copy
num_node = 19
dis_mat = [[99999,36,41,40,99999,99999,99999,99999,57,99999,99999,99999,99999,99999,99999,99999,99999,99999,99999],
      [36,99999,23,47,35,32,40,99999,99999,53,99999,99999,99999,99999,99999,99999,99999,99999,99999],
      [41,23,99999,28,57,27,39,46,42,99999,60,99999,99999,99999,99999,99999,99999,99999,99999],
      [40,47,28,99999,53,37,26,29,99999,799999,99999,55,99999,99999,99999,99999,99999,99999,99999],
      [99999,35,57,53,99999,99999,45,99999,99999,47,99999,99999,55,99999,99999,99999,99999,99999,55],
      [99999,32,27,37,99999,99999,48,22,36,99999,49,99999,99999,51,99999,99999,99999,99999,99999],
      [99999,499999,39,26,45,48,99999,34,99999,37,99999,68,53,99999,29,33,99999,99999,99999],
      [99999,99999,46,29,99999,22,34,99999,39,99999,37,48,42,45,99999,99999,99999,56,99999],
      [57,99999,42,99999,99999,36,99999,39,99999,99999,43,41,99999,44,99999,66,47,99999,99999],
      [99999,53,99999,799999,47,99999,37,99999,99999,99999,99999,99999,75,99999,99999,99999,28,99999,49],
      [99999,99999,60,99999,99999,49,99999,37,43,99999,99999,62,99999,35,99999,57,99999,45,51],
      [99999,99999,99999,55,99999,99999,68,48,41,99999,62,99999,24,52,45,99999,47,99999,45],
      [99999,99999,99999,99999,55,99999,53,42,99999,99999,99999,24,99999,38,30,99999,61,31,31],
      [99999,99999,99999,99999,99999,51,99999,45,44,99999,35,52,38,99999,50,48,51,99999,99999],
      [99999,99999,99999,99999,99999,99999,29,99999,99999,99999,99999,45,30,50,99999,40,33,99999,99999],
      [99999,99999,99999,99999,99999,99999,33,99999,66,99999,57,99999,99999,48,40,99999,26,25,99999],
      [99999,99999,99999,99999,99999,99999,99999,99999,47,28,99999,47,61,51,33,26,99999,99999,33],
      [99999,99999,99999,99999,99999,99999,99999,56,99999,99999,45,99999,31,99999,99999,25,99999,99999,29],
      [99999,99999,99999,99999,55,99999,99999,99999,99999,49,51,45,31,99999,99999,99999,33,29,99999]]






r = range(len(dis_mat))
n = 19
dist = {(i, j): dis_mat[i][j] for i in r for j in r}


m = gp.Model()

# Create variables

vars = m.addVars(dist.keys(), obj=dist, vtype=GRB.BINARY, name='e')
for i, j in vars.keys():
    vars[j, i] = vars[i, j]  # edge in opposite direction

# You could use Python looping constructs and m.addVar() to create
# these decision variables instead.  The following would be equivalent
# to the preceding m.addVars() call...
#
# vars = tupledict()
# for i,j in dist.keys():
#   vars[i,j] = m.addVar(obj=dist[i,j], vtype=GRB.BINARY,
#                        name='e[%d,%d]'%(i,j))


# Add degree-2 constraint

m.addConstrs(vars.sum(i, '*') == 2 for i in range(n))

# Using Python looping constructs, the preceding would be...
#
# for i in range(n):
#   m.addConstr(sum(vars[i,j] for j in range(n)) == 2)


# Optimize model

m._vars = vars
m.Params.lazyConstraints = 1
m.optimize(subtourelim)

vals = m.getAttr('x', vars)
selected = gp.tuplelist((i, j) for i, j in vals.keys() if vals[i, j] > 0.5)

tour = subtour(selected)
assert len(tour) == n

print('')
print('Optimal tour: %s' % str(tour))
print('Optimal cost: %g' % m.objVal)
print('')
# -------------------------------------------- Google ORTOOLS
dis_mat = [[99999,36,41,40,99999,99999,99999,99999,57,99999,99999,99999,99999,99999,99999,99999,99999,99999,99999],
      [36,99999,23,47,35,32,40,99999,99999,53,99999,99999,99999,99999,99999,99999,99999,99999,99999],
      [41,23,99999,28,57,27,39,46,42,99999,60,99999,99999,99999,99999,99999,99999,99999,99999],
      [40,47,28,99999,53,37,26,29,99999,799999,99999,55,99999,99999,99999,99999,99999,99999,99999],
      [99999,35,57,53,99999,99999,45,99999,99999,47,99999,99999,55,99999,99999,99999,99999,99999,55],
      [99999,32,27,37,99999,99999,48,22,36,99999,49,99999,99999,51,99999,99999,99999,99999,99999],
      [99999,499999,39,26,45,48,99999,34,99999,37,99999,68,53,99999,29,33,99999,99999,99999],
      [99999,99999,46,29,99999,22,34,99999,39,99999,37,48,42,45,99999,99999,99999,56,99999],
      [57,99999,42,99999,99999,36,99999,39,99999,99999,43,41,99999,44,99999,66,47,99999,99999],
      [99999,53,99999,70,47,99999,37,99999,99999,99999,99999,99999,75,99999,99999,99999,28,99999,49],
      [99999,99999,60,99999,99999,49,99999,37,43,99999,99999,62,99999,35,99999,57,99999,45,51],
      [99999,99999,99999,55,99999,99999,68,48,41,99999,62,99999,24,52,45,99999,47,99999,45],
      [99999,99999,99999,99999,55,99999,53,42,99999,99999,99999,24,99999,38,30,99999,61,31,31],
      [99999,99999,99999,99999,99999,51,99999,45,44,99999,35,52,38,99999,50,48,51,99999,99999],
      [99999,99999,99999,99999,99999,99999,29,99999,99999,99999,99999,45,30,50,99999,40,33,99999,99999],
      [99999,99999,99999,99999,99999,99999,33,99999,66,99999,57,99999,99999,48,40,99999,26,25,99999],
      [99999,99999,99999,99999,99999,99999,99999,99999,47,28,99999,47,61,51,33,26,99999,99999,33],
      [99999,99999,99999,99999,99999,99999,99999,56,99999,99999,45,99999,31,99999,99999,25,99999,99999,29],
      [99999,99999,99999,99999,55,99999,99999,99999,99999,49,51,45,31,99999,99999,99999,33,29,99999]]

r = range(len(dis_mat))
# Dictionary of distance
dist = {(i, j): dis_mat[i][j] for i in r for j in r}
print(tsp.tsp(r, dist))
